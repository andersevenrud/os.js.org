---
title: Tutorial - Create your own application (continued)
layout: doc
---
<h1>Tutorial: Create your own application (continued)</h1>

<p>
  More tutorials to come!
</p>

<h2>Designing UI</h2>
<p>
  Your <i>scheme.html</i> file is used for designing the UI of your application. You can use standard HTML markup, but this example shows the use of some internal elements.
</p>
<p>
  The entire GUI API is <a href="/doc/client/">documented</a> (scroll down in the left column until you reach the "GUI" section).
</p>
<div class="indent">
  <pre class="code">

&lt;application-window data-id="MyNameWindow"&gt;

  &lt;gui-vbox&gt;
    &lt;gui-vbox-container data-grow="0" data-shrink="1" data-basis="auto"&gt;
      &lt;gui-menu-bar&gt;

        &lt;gui-menu-bar-entry data-label="LBL_FILE"&gt;
          &lt;gui-menu data-id="SubmenuFile"&gt;
            &lt;gui-menu-entry data-id="MenuClose" data-label="LBL_CLOSE"&gt;&lt;/gui-menu-entry&gt;
          &lt;/gui-menu&gt;
        &lt;/gui-menu-bar-entry&gt;

      &lt;/gui-menu-bar&gt;
    &lt;/gui-vbox-container&gt;

    &lt;gui-vbox-container data-grow="0" data-shrink="1" data-basis="auto"&gt;
       &lt;gui-button-bar&gt;
          &lt;gui-button data-id="MyButtonOne"&gt;My Label&lt;/gui-button&gt;
          &lt;gui-button data-id="MyButtonTwo" data-icon="stock://16x16/places/folder_home.png"&gt;My Label and Icon&lt;/gui-button&gt;
        &lt;/gui-button-bar&gt;
    &lt;/gui-vbox-container&gt;

    &lt;gui-vbox-container data-grow="1" data-shrink="0" data-basis="auto" data-fill="true"&gt;
      &lt;gui-textarea data-id="Text"&gt;&lt;/gui-textarea&gt;
    &lt;/gui-vbox-container&gt;

  &lt;/gui-vbox&gt;


&lt;/application-window&gt;

  </pre>
</div>


<h2>Events and manipulation</h2>
<p>
  In <i>main.js</i> you can add events and make interactions with the UI you just created. In this example we just handle some buttons and menus.
</p>
<div class="indent">
  <pre class="code">
ApplicationMyNameWindow.prototype.init = function(wm, app, scheme) {
  var self = this;
  var root = Window.prototype.init.apply(this, arguments);

  // Render the scheme file above into window
  scheme.render(this, 'MyNameWindow', root);

  // Normal binding
  scheme.find(this, 'MenuClose').on('click', function() {
    self._close();
  });

  // Get a property
  scheme.find(this, 'MyButtonOne').on('click', function() {
    alert(scheme.find(self, 'Text').get('value'));
  });

  // Change a property
  scheme.find(this, 'MyButtonOne').on('click', function() {
    scheme.find(self, 'Text').set('value', 'CLICKED!');
  });

  // Create UI element programatically (chainable)
  scheme.create(this, 'gui-button', {disabled: true}, root).on('click', function() {

  });

  return root;
};
  </pre>
</div>
<h2>More advanced examples</h2>
<div class="indent">
  <p>You can extend the classes <b>DefaultApplication</b> and <b>DefaultApplicationWindow</b> for super-simple handling of opening/saving and creating files. It will also handle dnd and launch/restore arguments for you. Almost all internal OS.js applications use these.</p>
</div>
