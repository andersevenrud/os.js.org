---
title: Tutorial - Create your own Application with server API
layout: doc
---

      <h1>Tutorial: Create your own Application with server API</h1>

      <h2>Set up server method</h2>

      <p>
        <i>You don't have to use both PHP and Node, use the one appropriate for your setup</i>
      </p>

      <h3>Node</h3>
      <div class="indent">

        <p>
          Create the file "api.js" inside the package directory and use this as a template:
        </p>
        <pre class="code">

(function() {

  module.exports = {
    // Here you get args.Argument from call in application example below
    MyServerMethod: function(args, callback, request, response) {
      callback(false, { // First parameter: Error message (if any)
        foo: "bar"      // Second parameter: Result (data)
      });
    }
  };

})();

        </pre>
      </div>

      <h3>PHP</h3>
      <div class="indent">

        <p>
          Create the file "api.php" inside the package directory and use this as a template:
        </p>
        <pre class="code">

class ApplicationMyName // As you defined in metadata.json
{

  public static function call($method, $args) {
    if ( $method === 'MyServerMethod' ) {
      return Array(
        "foo" => "bar"
      );
    } else {
      throw new Exception("This is how you send an error");
    }

    return false;
  }

}

        </pre>
      </div>

      <h2>Set up application method</h2>
      <div class="indent">

        <p>
          To call the method you just created, simply create a new method in your Application:
        </p>
        <pre class="code">

ApplicationMyName.prototype.myServerMethod = function(callback) {
  this._call('MyServerMethod', {'Argument': 'Some Value'}, function(response) {
    callback(response.error, response.result);
  }, function(error) {
    callback(error);
  });
};

        </pre>
      </div>

      <h2>Calling the method</h2>
      <div class="indent">

        <p>
          For example, when you click a button in your window:
        </p>
        <pre class="code">

scheme.find(this, 'Button').on('click', function() {
  self._app.myServerMethod(function(error, result) {
    if ( error ) {
      alert('An error occured: ' + error);
      return;
    }

    // Or else do something with 'result'
    // In this example it should return {foo: bar}
    alert(result.foo);
  });
});

        </pre>
      </div>
